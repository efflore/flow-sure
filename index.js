var M=Object.defineProperty;var D=(x,S)=>{for(var J in S)M(x,J,{get:S[J],enumerable:!0,configurable:!0,set:($)=>S[J]=()=>$})};var K=(x)=>typeof x==="function",j=(x)=>K(x)&&/^async\s+/.test(x.toString()),Z=(x)=>x!=null,X=(x)=>(S)=>S instanceof x,Y=function(){return this};var I={};D(I,{unwrap:()=>H,of:()=>L,isMaybe:()=>C});var L=(x)=>!Z(x)?B.of():C(x)?x:G.of(x),C=(x)=>G.isOk(x)||B.isNil(x),H=(x)=>C(x)?x.get():x;class B{static instance=new B;constructor(){}static of=()=>B.instance;static isNil=(x)=>x===B.instance;get(){return}}var Q=B.prototype;Q.map=Q.chain=Q.filter=Q.guard=Q.catch=Y;Q.or=function(x){return L(x())};Q.match=function(x){return K(x.Nil)?x.Nil():this};class G{x;constructor(x){this.value=x}static of=(x)=>new G(x);static isOk=X(G);get(){return this.value}}var V=G.prototype;V.map=function(x){return new G(x(this.value))};V.chain=function(x){return x(this.value)};V.filter=V.guard=function(x){return x(this.value)?this:B.of()};V.or=V.catch=Y;V.match=function(x){return K(x.Ok)?x.Ok(this.value):this};class z{x;constructor(x){this.error=x}static of=(x)=>new z(x instanceof Error?x:new Error(String(x)));static isErr=X(z);get(){throw this.error}}var W=z.prototype;W.map=W.chain=Y;W.filter=W.guard=function(){return B.of()};W.or=function(x){return L(x())};W.catch=function(x){return console.debug(this),x(this.error)};W.match=function(x){return K(x.Err)?x.Err(this.error):this};var A={};D(A,{unwrap:()=>F,of:()=>g,isResult:()=>U,fromAsync:()=>_,from:()=>q});var g=(x)=>!Z(x)?B.of():U(x)?x:X(Error)(x)?z.of(x):G.of(x),q=(x)=>{try{return g(x())}catch(S){return z.of(S)}},_=async(x,S=0,J=1000)=>{try{return g(await x())}catch($){if(S<1)return z.of($);return await new Promise((w)=>setTimeout(w,J)),_(x,S-1,J*2)}},U=(x)=>G.isOk(x)||B.isNil(x)||z.isErr(x),F=(x)=>z.isErr(x)?x.error:H(x);async function m(...x){let S=K(x[0])?B.of():L(x.shift());for(let J of x){if(z.isErr(S))break;if(!K(J))return z.of(new TypeError("Expected a function in flow"));S=j(J)?await _(async()=>J(S.get())):q(()=>J(S.get()))}return S}export{K as isFunction,Z as isDefined,j as isAsyncFunction,m as flow,A as Result,G as Ok,B as Nil,I as Maybe,z as Err};
